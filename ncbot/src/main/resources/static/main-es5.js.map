{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/mainpage/mainpage.component.ts","webpack:///src/app/mainpage/mainpage.component.html","webpack:///src/app/modal-add-question/modal-add-question.component.ts","webpack:///src/app/modal-add-question/modal-add-question.component.html","webpack:///src/app/model/option/option.ts","webpack:///src/app/navigation/navigation.component.ts","webpack:///src/app/navigation/navigation.component.html","webpack:///src/app/not-found/not-found.component.ts","webpack:///src/app/not-found/not-found.component.html","webpack:///src/app/question/question.component.ts","webpack:///src/app/question/question.component.html","webpack:///src/app/questions/questions.component.ts","webpack:///src/app/questions/questions.component.html","webpack:///src/app/service/bot.service.ts","webpack:///src/app/service/question-service.service.ts","webpack:///src/app/service/user-service.service.ts","webpack:///src/app/users/users.component.ts","webpack:///src/app/users/users.component.html","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","AppRoutingModule","forRoot","imports","AppComponent","title","selector","templateUrl","styleUrls","appRoutes","path","component","pathMatch","AppModule","declarations","providers","bootstrap","MainpageComponent","botService","bot","active","isBotActive","subscribe","result","setBotTurn","location","reload","onClickTurnBtn","ModalAddQuestionComponent","modalService","modal","questionService","question","content","options","answer","weight","modalForm","editQuestion","isQuestionChanged","i","option","indexOfTrueOption","sendQuestion","error","alert","close","opt","push","addOptionToQuestion","Option","NavigationComponent","NotFoundComponent","QuestionComponent","httpClient","model","url","post","res","sendQuestionWithOptions","QuestionsComponent","getAllQuestions","questions","open","deleteQuestion","q","componentInstance","openCreationNewQuestionForm","BotService","get","providedIn","QuestionServiceService","host","UserServiceService","UsersComponent","userService","getAllUsers","users","checkIsUserActiveNow","forEach","value","activeNow","color","environment","production","bootstrapModule","catch","err","console"],"mappings":";;;;;;;;;;;;;;;;;AAAA,aAASA,wBAAT,CAAkCC,GAAlC,EAAuC;AACtC;AACA;AACA,aAAOC,OAAO,CAACC,OAAR,GAAkBC,IAAlB,CAAuB,YAAW;AACxC,YAAIC,CAAC,GAAG,IAAIC,KAAJ,CAAU,yBAAyBL,GAAzB,GAA+B,GAAzC,CAAR;AACAI,SAAC,CAACE,IAAF,GAAS,kBAAT;AACA,cAAMF,CAAN;AACA,OAJM,CAAP;AAKA;;AACDL,4BAAwB,CAACQ,IAAzB,GAAgC,YAAW;AAAE,aAAO,EAAP;AAAY,KAAzD;;AACAR,4BAAwB,CAACG,OAAzB,GAAmCH,wBAAnC;AACAS,UAAM,CAACC,OAAP,GAAiBV,wBAAjB;AACAA,4BAAwB,CAACW,EAAzB,GAA8B,yCAA9B;;;;;;;;;;;;;;;;ACZA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAIA,QAAMC,MAAM,GAAW,EAAvB;;QAMaC,gB;;;;;YAAAA;;;;yBAAAA,gB;AAAgB,O;AAAA,gBAHlB,CAAC,6DAAaC,OAAb,CAAqBF,MAArB,CAAD,CAGkB,EAFjB,4DAEiB;;;;0HAAhBC,gB,EAAgB;AAAA;AAAA,kBAFjB,4DAEiB;AAAA,O;AAFL,K;;;;;sEAEXA,gB,EAAgB;cAJ5B,sDAI4B;eAJnB;AACRE,iBAAO,EAAE,CAAC,6DAAaD,OAAb,CAAqBF,MAArB,CAAD,CADD;AAERF,iBAAO,EAAE,CAAC,4DAAD;AAFD,S;AAImB,Q;;;;;;;;;;;;;;;;;;ACV7B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAQaM,Y,GANb;AAAA;;AAOE,WAAAC,KAAA,GAAQ,UAAR;AACD,K;;;uBAFYD,Y;AAAY,K;;;YAAZA,Y;AAAY,+B;AAAA,c;AAAA,a;AAAA,gC;AAAA;AAAA;ACRzB;;AACE;;AACA;;AACF;;;;;;;;;sEDKaA,Y,EAAY;cANxB,uDAMwB;eANd;AACTE,kBAAQ,EAAE,UADD;AAETC,qBAAW,EAAE,sBAFJ;AAGTC,mBAAS,EAAE,CAAC,qBAAD;AAHF,S;AAMc,Q;;;;;;;;;;;;;;;;;;AERzB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAgBA,QAAMC,SAAS,GAAW,CACxB;AACEC,UAAI,EAAE,WADR;AAEEC,eAAS,EAAE;AAFb,KADwB,EAKxB;AACED,UAAI,EAAE,OADR;AAEEC,eAAS,EAAE;AAFb,KALwB,EASxB;AACED,UAAI,EAAE,EADR;AAEEC,eAAS,EAAE,8EAFb;AAGEC,eAAS,EAAE;AAHb,KATwB,EAcxB;AACEF,UAAI,EAAE,eADR;AAEEC,eAAS,EAAE;AAFb,KAdwB,EAkBxB;AACED,UAAI,EAAE,IADR;AAEEC,eAAS,EAAE;AAFb,KAlBwB,CAA1B;;QA6CaE,S;;;;;YAAAA,S;AAAS,kBAFR,2DAEQ;;;;yBAATA,S;AAAS,O;AAAA,iBAHT,E;AAAE,gBAPJ,CACP,uEADO,EAEP,oEAFO,EAGP,2DAHO,EAIP,sEAJO,EAKP,6DAAaX,OAAb,CAAqBO,SAArB,CALO,CAOI;;;;0HAGFI,S,EAAS;AAAA,uBAnBlB,2DAmBkB,EAlBlB,oFAkBkB,EAjBlB,iFAiBkB,EAhBlB,qEAgBkB,EAflB,gFAekB,EAdlB,8EAckB,EAblB,+EAakB,EAZlB,2GAYkB;AAZO,kBAGzB,uEAHyB,EAIzB,oEAJyB,EAKzB,2DALyB,EAMzB,sEANyB,EAMT,4DANS;AAYP,O;AANF,K;;;;;sEAMPA,S,EAAS;cArBrB,sDAqBqB;eArBZ;AACRC,sBAAY,EAAE,CACZ,2DADY,EAEZ,oFAFY,EAGZ,iFAHY,EAIZ,qEAJY,EAKZ,gFALY,EAMZ,8EANY,EAOZ,+EAPY,EAQZ,2GARY,CADN;AAWRX,iBAAO,EAAE,CACP,uEADO,EAEP,oEAFO,EAGP,2DAHO,EAIP,sEAJO,EAKP,6DAAaD,OAAb,CAAqBO,SAArB,CALO,CAXD;AAkBRM,mBAAS,EAAE,EAlBH;AAmBRC,mBAAS,EAAE,CAAC,2DAAD;AAnBH,S;AAqBY,Q;;;;;;;;;;;;;;;;;;AC7DtB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QASaC,iB;;;AAIX,iCAAoBC,UAApB,EAA2C;AAAA;;AAAvB,aAAAA,UAAA,GAAAA,UAAA;AAHpB,aAAAC,GAAA,GAAU;AACRC,gBAAM,EAAC;AADC,SAAV;AAG8C;;;;mCAEtC;AAAA;;AACN,eAAKF,UAAL,CAAgBG,WAAhB,GAA8BC,SAA9B,CAAwC,UAACC,MAAD,EAAe;AACrD,iBAAI,CAACJ,GAAL,GAAWI,MAAX;AACD,WAFD;AAGD;;;yCAEa;AAAA;;AACZ,eAAKL,UAAL,CAAgBM,UAAhB,CAA2B,KAAKL,GAAhC,EAAqCG,SAArC,CAA+C,UAACC,MAAD,EAAe;AAC5D,kBAAI,CAACJ,GAAL,GAAWI,MAAX;AACAE,oBAAQ,CAACC,MAAT;AACD,WAHD;AAID;;;2CAEe;AACd,cAAI,KAAKP,GAAL,CAASC,MAAT,IAAmB,IAAvB,EAA6B;AAC3B,mBAAO,IAAP;AACD;;AACD,iBAAO,KAAP;AACD;;;;;;;uBAxBUH,iB,EAAiB,gI;AAAA,K;;;YAAjBA,iB;AAAiB,mC;AAAA,e;AAAA,a;AAAA,uM;AAAA;AAAA;ACT9B;;AACE;;AACE;;AACE;;AACA;;AACF;;AACA;;AACE;;AACF;;AACA;;AACE;;AACF;;AACF;;AACA;;AACE;;AACE;;AAAgC;AAAA,mBAAS,IAAAU,cAAA,EAAT;AAAyB,WAAzB;;AAA2B;;AAAsB;;AACnF;;AACF;;AACF;;;;AAHiE;;AAAA;;;;;;;;sEDNpDV,iB,EAAiB;cAL7B,uDAK6B;eALnB;AACTX,kBAAQ,EAAE,cADD;AAETC,qBAAW,EAAE,2BAFJ;AAGTC,mBAAS,EAAE,CAAC,0BAAD;AAHF,S;AAKmB,Q;;;;;;;;;;;;;;;;;;;;;;AET9B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;AC8BM;;AACE;;AACE;;AACE;;AACF;;AACF;;AACA;;AACE;;AAAO;AAAA;;AAAA;AAAA;AAAA;;AAAP;;AACF;;AAEA;;AACE;;AACE;;AACF;;AACA;;AAAiD;AAAA;;AAAA;;AAAA;AAAA;;AAAjD;;AACF;;AACF;;;;;;;;;AATW;;AAAA;;AAO4B;;AAAA;;AAAc;;;;;;;;AASvD;;AAA0E;AAAA;;AAAA;;AAAA;AAAA;;AACxE;;AACF;;;;;;;;AACA;;AAA0E;AAAA;;AAAA;;AAAA;AAAA;;AACxE;;AACF;;;;QD9CSoB,yB;;;AAcX,yCAAoBC,YAApB,EAAoDC,KAApD,EAAmFC,eAAnF,EAA4H;AAAA;;AAAxG,aAAAF,YAAA,GAAAA,YAAA;AAAgC,aAAAC,KAAA,GAAAA,KAAA;AAA+B,aAAAC,eAAA,GAAAA,eAAA;AATnF,aAAAC,QAAA,GAAqB;AACnBjC,YAAE,EAAC,CADgB;AAEnBkC,iBAAO,EAAE,EAFU;AAGnBC,iBAAO,EAAE,EAHU;AAInBC,gBAAM,EAAE,EAJW;AAKnBC,gBAAM,EAAC;AALY,SAArB;AAUE,aAAKC,SAAL,GAAiBP,KAAjB;AACD;;;;mCAGO;AACN,cAAI,KAAKQ,YAAL,IAAqB,IAAzB,EAA+B;AAC7B,iBAAKC,iBAAL,GAAyB,IAAzB;AACA,iBAAKP,QAAL,GAAgB,KAAKM,YAArB;AACD,WAHD,MAIM;AACJ,iBAAKC,iBAAL,GAAyB,KAAzB;AACD;AACF;;;uCAEc;AACb,cAAIC,CAAC,GAAU,CAAf;AADa;AAAA;AAAA;;AAAA;AAEb,iCAAmB,KAAKR,QAAL,CAAcE,OAAjC,8HAAyC;AAAA,kBAAhCO,MAAgC;;AACvC,kBAAID,CAAC,IAAI,KAAKE,iBAAd,EAAiC;AAC/B,qBAAKV,QAAL,CAAcG,MAAd,GAAuBM,MAAM,CAACR,OAA9B;AACD;;AACDO,eAAC;AACF;AAPY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAQb,eAAKT,eAAL,CAAqBY,YAArB,CAAkC,KAAKX,QAAvC,EAAiD,KAAKO,iBAAtD,EAAyEjB,SAAzE,CAAmF,UAAAC,MAAM,EAAI;AACzFE,oBAAQ,CAACC,MAAT;AACD,WAFH,EAGE,UAAAkB,KAAK,EAAI;AACPC,iBAAK,CAAC,OAAD,CAAL;AACD,WALH;AAMA,eAAKR,SAAL,CAAeS,KAAf,CAAqB,QAArB;AACD;;;8CAEqB;AACpB,cAAIC,GAAG,GAAW,IAAI,2DAAJ,EAAlB;AACA,eAAKf,QAAL,CAAcE,OAAd,CAAsBc,IAAtB,CAA2BD,GAA3B;AACD;;;iDAEwB,CAExB;;;;;;;uBArDUnB,yB,EAAyB,oI,EAAA,0I,EAAA,yJ;AAAA,K;;;YAAzBA,yB;AAAyB,6C;AAAA;AAAA;AAAA,O;AAAA,e;AAAA,a;AAAA,wwB;AAAA;AAAA;ACZtC;;AACE;;AACE;;AAAwB;;AAAgB;;AACxC;;AAAuD;AAAA,mBAAS,IAAAS,SAAA,SAAkB,aAAlB,CAAT;AAAyC,WAAzC;;AACrD;;AAAyB;;AAAO;;AAClC;;AACF;;AACA;;AACE;;AACE;;AACE;;AACE;;AACE;;AACF;;AACF;;AACA;;AACF;;AAAU;AAAA;AAAA;;AACV;;AAAA;;AACE;;AACA;;AACE;;AAA8B;;AAAM;;AACpC;;AAAQ;AAAA;AAAA;;AACN;;AAAQ;;AAAC;;AACT;;AAAQ;;AAAC;;AACT;;AAAQ;;AAAC;;AACT;;AAAQ;;AAAC;;AACT;;AAAQ;;AAAC;;AACX;;AACF;;AACF;;AACA;;AAiBF;;AACF;;AACA;;AACE;;AAA0E;AAAA,mBAAS,IAAAY,mBAAA,EAAT;AAA8B,WAA9B;;AAAgC;;AAE1G;;AACA;;AAGA;;AAGF;;AACF;;;;AA5CgB;;AAAA;;AAKE;;AAAA;;AASK;;AAAA;;AAuBgF;;AAAA;;AAGA;;AAAA;;;;;;;;;sED5C1FrB,yB,EAAyB;cALrC,uDAKqC;eAL3B;AACTtB,kBAAQ,EAAE,wBADD;AAETC,qBAAW,EAAE,qCAFJ;AAGTC,mBAAS,EAAE,CAAC,oCAAD;AAHF,S;AAK2B,Q;;;;;;;;;;gBACnC;;;;;;;;;;;;;;;;;;;;AEbH;AAAA;;;AAAA;AAAA;AAAA;;QAAa0C,M;;;;;;;;;;;;;;;;;;;ACAb;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAOaC,mB;;;AACX,qCAAc;AAAA;AAAG;;;;mCAET,CACP;;;;;;;uBAJUA,mB;AAAmB,K;;;YAAnBA,mB;AAAmB,qC;AAAA,e;AAAA,a;AAAA,krB;AAAA;AAAA;ACPhC;;AACE;;AAAiC;;AAAe;;AAChD;;AACE;;AACF;;AACA;;AACE;;AACE;;AAA6C;;AAAI;;AAAsB;;AAAS;;AAAO;;AACvF;;AAA8C;;AAAQ;;AACtD;;AAA2C;;AAAK;;AAChD;;AAAkF;;AAAU;;AAC9F;;AACF;;AACF;;;;;;;;sEDNaA,mB,EAAmB;cAL/B,uDAK+B;eALrB;AACT7C,kBAAQ,EAAE,gBADD;AAETC,qBAAW,EAAE,6BAFJ;AAGTC,mBAAS,EAAE,CAAC,4BAAD;AAHF,S;AAKqB,Q;;;;;;;;;;;;;;;;;;;;AEPhC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAOa4C,iB;;;AAEX,mCAAc;AAAA;AAAG;;;;mCAET,CACP;;;;;;;uBALUA,iB;AAAiB,K;;;YAAjBA,iB;AAAiB,oC;AAAA,c;AAAA,a;AAAA;AAAA;ACP9B;;AAAG;;AAAgB;;;;;;;;sEDONA,iB,EAAiB;cAL7B,uDAK6B;eALnB;AACT9C,kBAAQ,EAAE,eADD;AAETC,qBAAW,EAAE,4BAFJ;AAGTC,mBAAS,EAAE,CAAC,2BAAD;AAHF,S;AAKmB,Q;;;;;;;;;;;;;;;;;;;;AEP9B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAQa6C,iB;;;AAKX,iCAAoBC,UAApB,EAA4C;AAAA;;AAAxB,aAAAA,UAAA,GAAAA,UAAA;AAJpB,aAAAC,KAAA,GAAsC;AACpCvB,kBAAQ,EAAC,EAD2B;AAEpCE,iBAAO,EAAC;AAF4B,SAAtC;AAI+C;;;;mCAEvC,CACP;;;kDAEsB;AACrB,cAAIsB,GAAG,GAAC,qCAAR;AACA,eAAKF,UAAL,CAAgBG,IAAhB,CAAqBD,GAArB,EAA0B,KAAKD,KAA/B,EAAsCjC,SAAtC,CAAgD,UAAAoC,GAAG,EAAG;AAElDjC,oBAAQ,CAACC,MAAT;AACD,WAHH,EAIE,UAAAkB,KAAK,EAAI;AACPC,iBAAK,CAAC,OAAD,CAAL;AACD,WANH;AAQD;;;;;;;uBApBUQ,iB,EAAiB,gI;AAAA,K;;;YAAjBA,iB;AAAiB,mC;AAAA,e;AAAA,a;AAAA,mb;AAAA;AAAA;ACR9B;;AAAM;AAAA,mBAAU,IAAAM,uBAAA,EAAV;AAAmC,WAAnC;;AACJ;;AACE;;AAA+D;;AAAQ;;AACvE;;AACE;;AAA+D;AAAA;AAAA;;AAA/D;;AACF;;AACF;;AACA;;AACE;;AAAoD;;AAAM;;AAC1D;;AACE;;AACF;;AACF;;AACA;;AACE;;AACE;;AAA8C;;AAAE;;AAClD;;AACF;;AACF;;;;AAdqE;;AAAA;;;;;;;;;sEDIxDN,iB,EAAiB;cAL7B,uDAK6B;eALnB;AACT/C,kBAAQ,EAAE,cADD;AAETC,qBAAW,EAAE,2BAFJ;AAGTC,mBAAS,EAAE,CAAC,0BAAD;AAHF,S;AAKmB,Q;;;;;;;;;;;;;;;;;;;;;;AER9B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACoCQ;;AACE;;AACE;;AACF;;AACF;;;;;;AAFI;;AAAA;;;;;;;;AAXR;;AACA;;AACE;;AACE;;AACF;;AACA;;AACE;;AACF;;AACA;;AACE;;AAKF;;AACA;;AACE;;AACF;;AACA;;AACE;;AACF;;AACA;;AACE;;AACE;;AACE;;AACE;;AAAgC;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAiC;;AAAI;;AACvE;;AACA;;AACE;;AAA+B;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAsC;;AAAM;;AAC7E;;AACF;;AACF;;AACF;;AACF;;AACA;;;;;;;AAjCI;;AAAA;;AAEA;;AAAA;;AAGA;;AAAA;;AAGI;;AAAA;;AAOJ;;AAAA;;AAGA;;AAAA;;;;QDnCKoD,kB;;;AAEX,kCAAoB7B,eAApB,EAAqEF,YAArE,EAA6F;AAAA;;AAAzE,aAAAE,eAAA,GAAAA,eAAA;AAAiD,aAAAF,YAAA,GAAAA,YAAA;AAA2B;;;;mCAExF;AAAA;;AACN,eAAKE,eAAL,CAAqB8B,eAArB,GAAuCvC,SAAvC,CAAiD,UAACC,MAAD,EAAsB;AAEnE,kBAAI,CAACuC,SAAL,GAAiBvC,MAAjB;AACD,WAHH;AAKD;;;sDAE0B;AACzB,eAAKM,YAAL,CAAkBkC,IAAlB,CAAuB,0GAAvB;AACD;;;uCAEchE,E,EAAE;AACf,eAAKgC,eAAL,CAAqBiC,cAArB,CAAoCjE,EAApC,EAAwCuB,SAAxC,CAAkD,UAAAC,MAAM,EAAI;AAC1DE,oBAAQ,CAACC,MAAT;AACD,WAFD,EAEG,UAAAkB,KAAK,EAAI;AACVC,iBAAK,CAAC,OAAD,CAAL;AACD,WAJD;AAKD;;;qCAEYoB,C,EAAU;AACrB,cAAI5B,SAAS,GAAG,KAAKR,YAAL,CAAkBkC,IAAlB,CAAuB,0GAAvB,CAAhB;AACA1B,mBAAS,CAAC6B,iBAAV,CAA4B5B,YAA5B,GAA2C2B,CAA3C;AACD;;;;;;;uBA3BUL,kB,EAAkB,yJ,EAAA,oI;AAAA,K;;;YAAlBA,kB;AAAkB,oC;AAAA,e;AAAA,a;AAAA,kV;AAAA;AAAA;ACX/B;;AACE;;AAAsB;AAAA,mBAAS,IAAAO,2BAAA,EAAT;AAAsC,WAAtC;;AACgB;;AACtC;;AACA;;AACE;;AACA;;AACE;;AACE;;AACF;;AACA;;AACE;;AACF;;AACA;;AACE;;AACF;;AACA;;AACE;;AACF;;AACA;;AACE;;AACF;;AACA;;AACE;;AACF;;AACF;;AACA;;AACA;;AAmCF;;AACF;;;;AApCW;;AAAA;;;;;;;;;sEDhBEP,kB,EAAkB;cAL9B,uDAK8B;eALpB;AACTtD,kBAAQ,EAAE,eADD;AAETC,qBAAW,EAAE,4BAFJ;AAGTC,mBAAS,EAAE,CAAC,2BAAD;AAHF,S;AAKoB,Q;;;;;;;;;;;;;;;;;;;;;;;;AEX/B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAQa4D,U;;;AAEX,0BAAoBd,UAApB,EAA4C;AAAA;;AAAxB,aAAAA,UAAA,GAAAA,UAAA;AAA2B;;;;sCAEpC;AACT,iBAAO,KAAKA,UAAL,CAAgBe,GAAhB,CAAoB,eAApB,CAAP;AACD;;;mCAEUlD,G,EAAO;AAChB,cAAIqC,GAAG,GAAU,WAAjB;AACA,iBAAO,KAAKF,UAAL,CAAgBG,IAAhB,CAAqBD,GAArB,EAA0BrC,GAA1B,CAAP;AACD;;;;;;;uBAXUiD,U,EAAU,uH;AAAA,K;;;aAAVA,U;AAAU,eAAVA,UAAU,K;AAAA,kBAFT;;;;;sEAEDA,U,EAAU;cAHtB,wDAGsB;eAHX;AACVE,oBAAU,EAAE;AADF,S;AAGW,Q;;;;;;;;;;;;;;;;;;;;;;ACRvB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAQaC,sB;;;AAIX,sCAAoBjB,UAApB,EAA4C;AAAA;;AAAxB,aAAAA,UAAA,GAAAA,UAAA;AAHpB,aAAAkB,IAAA,GAAO,aAAP;AAIC;;;;0CAEc;AACb,cAAIhB,GAAG,GAAG,KAAKgB,IAAL,GAAY,UAAtB;AACA,iBAAO,KAAKlB,UAAL,CAAgBe,GAAhB,CAAoBb,GAApB,CAAP;AACD;;;qCAEYxB,Q,EAAoBO,iB,EAA0B;AACzD,cAAIiB,GAAJ;;AACA,cAAIjB,iBAAJ,EAAuB;AACrBiB,eAAG,GAAG,KAAKgB,IAAL,GAAY,MAAlB;AACD,WAFD,MAEO;AACLhB,eAAG,GAAG,KAAKgB,IAAL,GAAY,KAAlB;AACD;;AACD,iBAAO,KAAKlB,UAAL,CAAgBG,IAAhB,CAAqBD,GAArB,EAA0BxB,QAA1B,CAAP;AACD;;;uCAEcjC,E,EAAE;AACf,cAAIyD,GAAG,GAAG,KAAKgB,IAAL,GAAY,YAAZ,GAA2BzE,EAArC;AACA,iBAAO,KAAKuD,UAAL,CAAgBe,GAAhB,CAAoBb,GAApB,CAAP;AACD;;;qCAEYzD,E,EAAE;AACb,cAAIyD,GAAG,GAAG,KAAKgB,IAAL,GAAY,UAAZ,GAAyBzE,EAAnC;AACA,iBAAO,KAAKuD,UAAL,CAAgBe,GAAhB,CAAoBb,GAApB,CAAP;AACD;;;;;;;uBA9BUe,sB,EAAsB,uH;AAAA,K;;;aAAtBA,sB;AAAsB,eAAtBA,sBAAsB,K;AAAA,kBAFrB;;;;;sEAEDA,sB,EAAsB;cAHlC,wDAGkC;eAHvB;AACVD,oBAAU,EAAE;AADF,S;AAGuB,Q;;;;;;;;;;;;;;;;;;;;;;ACRnC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAOaG,kB;;;AAEX,kCAAoBnB,UAApB,EAA4C;AAAA;;AAAxB,aAAAA,UAAA,GAAAA,UAAA;AAA2B;;;;sCAEpC;AACT,iBAAO,KAAKA,UAAL,CAAgBe,GAAhB,CAAoB,WAApB,CAAP;AACD;;;;;;;uBANUI,kB,EAAkB,uH;AAAA,K;;;aAAlBA,kB;AAAkB,eAAlBA,kBAAkB,K;AAAA,kBAFjB;;;;;sEAEDA,kB,EAAkB;cAH9B,wDAG8B;eAHnB;AACVH,oBAAU,EAAE;AADF,S;AAGmB,Q;;;;;;;;;;;;;;;;;;;;;;ACP/B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;;;;;ACoBE;;AACA;;AACE;;AACE;;AACF;;AACA;;AACE;;AACF;;AACA;;AACE;;AACF;;AACA;;AACE;;AACF;;AACA;;AACE;;AACF;;AACF;;AACA;;;;;;;AAjBI;;AAAA;;AAEA;;AAAA;;AAGA;;AAAA;;AAGA;;AAAA;;AAGA;;AAAA;;AAGA;;AAAA;;;;QD1BOI,c;;;AAEX,8BAAoBC,WAApB,EAAqD;AAAA;;AAAjC,aAAAA,WAAA,GAAAA,WAAA;AAAoC;;;;mCAEhD;AAAA;;AACN,eAAKA,WAAL,CAAiBC,WAAjB,GAA+BtD,SAA/B,CAAyC,UAACC,MAAD,EAAkB;AAEvD,kBAAI,CAACsD,KAAL,GAAatD,MAAb;;AACA,kBAAI,CAACuD,oBAAL,CAA0B,MAAI,CAACD,KAA/B;AACD,WAJH;AAMD;;;6CAEoBA,K,EAAK;AACzBA,eAAK,CAACE,OAAN,CAAc,UAAUC,KAAV,EAAsB;AACjC,gBAAIA,KAAK,CAACC,SAAV,EAAoB;AAClBD,mBAAK,CAACE,KAAN,GAAc,QAAd;AACD,aAFD,MAGK;AACHF,mBAAK,CAACE,KAAN,GAAY,OAAZ;AACD;AACH,WAPD;AAQA;;;;;;;uBAtBUR,c,EAAc,iJ;AAAA,K;;;YAAdA,c;AAAc,gC;AAAA,e;AAAA,a;AAAA,uF;AAAA;AAAA;ACT3B;;AACE;;AACA;;AACE;;AACE;;AACF;;AACA;;AACE;;AACF;;AACA;;AACE;;AACF;;AACA;;AACE;;AACF;;AACA;;AACE;;AACF;;AACF;;AACA;;AACA;;AAmBF;;;;AAnBS;;AAAA;;;;;;;;;sEDXIA,c,EAAc;cAL1B,uDAK0B;eALhB;AACTpE,kBAAQ,EAAE,WADD;AAETC,qBAAW,EAAE,wBAFJ;AAGTC,mBAAS,EAAE,CAAC,uBAAD;AAHF,S;AAKgB,Q;;;;;;;;;;;;;;;;;;;;;;AET3B;AAAA;;;AAAA;AAAA;AAAA,O,CAAA;AACA;AACA;;;AAEO,QAAM2E,WAAW,GAAG;AACzBC,gBAAU,EAAE;AADa,KAApB;AAIP;;;;;;;AAOA;;;;;;;;;;;;;;;;;ACfA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAMA,QAAI,sEAAYA,UAAhB,EAA4B;AAC1B;AACD;;AAED,gFAAyBC,eAAzB,CAAyC,yDAAzC,EACGC,KADH,CACS,UAAAC,GAAG;AAAA,aAAIC,OAAO,CAAC5C,KAAR,CAAc2C,GAAd,CAAJ;AAAA,KADZ","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\n\r\nconst routes: Routes = [];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\n\r\nexport class AppComponent {\r\n  title = 'ncbot-ui';\r\n}\r\n","<div class=\"container\">\r\n  <app-navigation></app-navigation>\r\n  <router-outlet></router-outlet>\r\n</div>\r\n","import {BrowserModule} from '@angular/platform-browser';\r\nimport {NgModule} from '@angular/core';\r\n\r\nimport {AppRoutingModule} from './app-routing.module';\r\nimport {AppComponent} from './app.component';\r\nimport {NavigationComponent} from './navigation/navigation.component';\r\nimport {RouterModule, Routes} from \"@angular/router\";\r\nimport {QuestionsComponent} from './questions/questions.component';\r\nimport {UsersComponent} from './users/users.component';\r\nimport {NotFoundComponent} from './not-found/not-found.component';\r\nimport {MainpageComponent} from './mainpage/mainpage.component';\r\nimport {FormsModule} from \"@angular/forms\";\r\nimport {HttpClientModule} from \"@angular/common/http\";\r\nimport { QuestionComponent } from './question/question.component';\r\nimport { ModalAddQuestionComponent } from './modal-add-question/modal-add-question.component';\r\n\r\nconst appRoutes: Routes = [\r\n  {\r\n    path: 'questions',\r\n    component: QuestionsComponent\r\n  },\r\n  {\r\n    path: 'users',\r\n    component: UsersComponent\r\n  },\r\n  {\r\n    path: '',\r\n    component: MainpageComponent,\r\n    pathMatch: 'full'\r\n  },\r\n  {\r\n    path: 'questions/add',\r\n    component: QuestionComponent\r\n  },\r\n  {\r\n    path: '**',\r\n    component: NotFoundComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    NavigationComponent,\r\n    QuestionsComponent,\r\n    UsersComponent,\r\n    NotFoundComponent,\r\n    MainpageComponent,\r\n    QuestionComponent,\r\n    ModalAddQuestionComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    FormsModule,\r\n    HttpClientModule,\r\n    RouterModule.forRoot(appRoutes)\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule {\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport {BotService} from \"../service/bot.service\";\r\nimport {Bot} from \"../model/bot/bot\";\r\n\r\n@Component({\r\n  selector: 'app-mainpage',\r\n  templateUrl: './mainpage.component.html',\r\n  styleUrls: ['./mainpage.component.css']\r\n})\r\nexport class MainpageComponent implements OnInit {\r\n  bot:Bot = {\r\n    active:true\r\n  };\r\n  constructor(private botService:BotService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.botService.isBotActive().subscribe((result:Bot) =>{\r\n      this.bot = result;\r\n    })\r\n  }\r\n\r\n  onClickTurnBtn(){\r\n    this.botService.setBotTurn(this.bot).subscribe((result:Bot) =>{\r\n      this.bot = result;\r\n      location.reload();\r\n    });\r\n  }\r\n\r\n  checkBotActivity():string{\r\n    if (this.bot.active == true) {\r\n      return \"on\";\r\n    }\r\n    return \"off\";\r\n  }\r\n\r\n}\r\n","<div class=\"container\">\r\n  <div class=\"row\">\r\n    <div class=\"col\">\r\n      <img src=\"./src/qr_link_to_telegram_bot.png\"/>\r\n      find me: @nctelegrambot\r\n    </div>\r\n    <div class=\"col\">\r\n      welcome to nc telegram bot configurer\r\n    </div>\r\n    <div class=\"col\">\r\n      for configuration, please sign in or sign up as nc edu center user\r\n    </div>\r\n  </div>\r\n  <div class=\"row\">\r\n    <div class=\"col container-fluid\" style=\"text-align: center\">\r\n      <button class=\"btn btn-primary\" (click)=\"onClickTurnBtn()\">{{checkBotActivity()}}</button>\r\n    </div>\r\n  </div>\r\n</div>\r\n","import {Component, Input, OnInit} from '@angular/core';\r\nimport {NgbModal, NgbActiveModal} from \"@ng-bootstrap/ng-bootstrap\";\r\nimport {Question} from \"../model/question/question\";\r\nimport {Option} from \"../model/option/option\";\r\nimport {QuestionServiceService} from \"../service/question-service.service\";\r\n\r\n\r\n@Component({\r\n  selector: 'app-modal-add-question',\r\n  templateUrl: './modal-add-question.component.html',\r\n  styleUrls: ['./modal-add-question.component.css']\r\n})\r\nexport class ModalAddQuestionComponent implements OnInit {\r\n  @Input() editQuestion:Question;\r\n  modalForm: NgbActiveModal;\r\n  indexOfTrueOption:number;\r\n  isQuestionChanged:boolean;\r\n  question: Question = {\r\n    id:0,\r\n    content: '',\r\n    options: [],\r\n    answer: '',\r\n    weight:0\r\n  };\r\n\r\n\r\n  constructor(private modalService: NgbModal, private modal: NgbActiveModal, private questionService: QuestionServiceService) {\r\n    this.modalForm = modal;\r\n  }\r\n\r\n\r\n  ngOnInit(): void {\r\n    if (this.editQuestion != null) {\r\n      this.isQuestionChanged = true;\r\n      this.question = this.editQuestion;\r\n    }\r\n    else  {\r\n      this.isQuestionChanged = false;\r\n    }\r\n  }\r\n\r\n  saveQuestion() {\r\n    let i:number = 0;\r\n    for (let option of this.question.options){\r\n      if (i == this.indexOfTrueOption) {\r\n        this.question.answer = option.content;\r\n      }\r\n      i++;\r\n    }\r\n    this.questionService.sendQuestion(this.question, this.isQuestionChanged).subscribe(result => {\r\n        location.reload();\r\n      },\r\n      error => {\r\n        alert(\"Error\")\r\n      });\r\n    this.modalForm.close(\"Efrfrf\");\r\n  }\r\n\r\n  addOptionToQuestion() {\r\n    let opt: Option = new Option();\r\n    this.question.options.push(opt);\r\n  }\r\n\r\n  removeOptionToQuestion() {\r\n\r\n  }\r\n\r\n}\r\n","<div class=\"modal-lg\">\r\n  <div class=\"modal-header\">\r\n    <h4 class=\"modal-title\">add new question</h4>\r\n    <button type=\"button\" class=\"close\" aria-label=\"Close\" (click)=\"modalForm.dismiss('Cross click')\">\r\n      <span aria-hidden=\"true\">&times;</span>\r\n    </button>\r\n  </div>\r\n  <div class=\"modal-body\">\r\n    <div class=\"container\">\r\n      <div class=\"row\">\r\n        <div class=\"col\">\r\n          <label for=\"question__input\">\r\n            question\r\n          </label>\r\n        </div>\r\n        <div class=\"col\">\r\n      <textarea [(ngModel)]=\"question.content\" id=\"question__input\">\r\n      </textarea>\r\n        </div>\r\n        <div class=\"col\">\r\n          <label for=\"weight__selector\">weight</label>\r\n          <select [(ngModel)]=\"question.weight\" id=\"weight__selector\">\r\n            <option>1</option>\r\n            <option>2</option>\r\n            <option>3</option>\r\n            <option>4</option>\r\n            <option>5</option>\r\n          </select>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\" *ngFor=\"let option of this.question.options; let i = index\">\r\n        <div class=\"col\">\r\n          <label>\r\n            option\r\n          </label>\r\n        </div>\r\n        <div class=\"col\">\r\n          <input [(ngModel)]=\"option.content\" type=\"text\"/>\r\n        </div>\r\n\r\n        <div class=\"col\">\r\n          <label>\r\n            is true\r\n          </label>\r\n          <input type=\"radio\" name=\"is_true\" value=\"{{i}}\" [(ngModel)]=\"indexOfTrueOption\"/>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class=\"modal-footer\">\r\n    <button type=\"submit\" style=\"margin: 0 20px auto\" class=\"btn btn-primary\" (click)=\"addOptionToQuestion()\">add\r\n      option\r\n    </button>\r\n    <button type=\"submit\" class=\"btn btn-primary\" style=\"margin: 0 20px auto\" (click)=\"saveQuestion()\" *ngIf=\"isQuestionChanged\">\r\n      edit question\r\n    </button>\r\n    <button type=\"submit\" class=\"btn btn-primary\" style=\"margin: 0 20px auto\" (click)=\"saveQuestion()\" *ngIf=\"!isQuestionChanged\">\r\n      save question\r\n    </button>\r\n  </div>\r\n</div>\r\n","export class Option {\r\n  id:number;\r\n  content:string;\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-navigation',\r\n  templateUrl: './navigation.component.html',\r\n  styleUrls: ['./navigation.component.css']\r\n})\r\nexport class NavigationComponent implements OnInit {\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n}\r\n","<nav class=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n  <a class=\"navbar-brand\" href=\"#\">NC TELEGRAM BOT</a>\r\n  <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNavAltMarkup\" aria-controls=\"navbarNavAltMarkup\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n    <span class=\"navbar-toggler-icon\"></span>\r\n  </button>\r\n  <div class=\"collapse navbar-collapse\" id=\"navbarNavAltMarkup\">\r\n    <div class=\"navbar-nav\">\r\n      <a class=\"nav-item nav-link active\" href=\"/\">home<span class=\"sr-only\">(current)</span></a>\r\n      <a class=\"nav-item nav-link\" href=\"questions\">qustions</a>\r\n      <a class=\"nav-item nav-link\" href=\"/users\">users</a>\r\n      <a class=\"nav-item nav-link disabled\" href=\"#\" tabindex=\"-1\" aria-disabled=\"true\">sign in/up</a>\r\n    </div>\r\n  </div>\r\n</nav>\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-not-found',\r\n  templateUrl: './not-found.component.html',\r\n  styleUrls: ['./not-found.component.css']\r\n})\r\nexport class NotFoundComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<p>not-found works!</p>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport {HttpClient} from \"@angular/common/http\";\r\n\r\n@Component({\r\n  selector: 'app-question',\r\n  templateUrl: './question.component.html',\r\n  styleUrls: ['./question.component.css']\r\n})\r\nexport class QuestionComponent implements OnInit {\r\n  model:AddingQuestionWithOptionsForm = {\r\n    question:'',\r\n    options:[]\r\n  };\r\n  constructor(private httpClient: HttpClient) { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  sendQuestionWithOptions(): void{\r\n    let url=\"http://localhost:8080/questions/add\";\r\n    this.httpClient.post(url, this.model).subscribe(res =>\r\n      {\r\n        location.reload();\r\n      },\r\n      error => {\r\n        alert(\"Error\");\r\n      }\r\n    )\r\n  }\r\n\r\n}\r\n\r\nexport interface AddingQuestionWithOptionsForm {\r\n  question:string;\r\n  options:Option[];\r\n}\r\n\r\nexport interface Option {\r\n  content:string;\r\n}\r\n","<form (submit)=\"sendQuestionWithOptions()\">\r\n  <div class=\"form-group row\">\r\n    <label for=\"question__content\" class=\"col-sm-2 col-form-label\">question</label>\r\n    <div class=\"col-sm-10\">\r\n      <input type=\"text\" class=\"form-control\" id=\"question__content\" [(ngModel)] = model.question placeholder=\"question\">\r\n    </div>\r\n  </div>\r\n  <div class=\"form-group row\">\r\n    <label for=\"option\" class=\"col-sm-2 col-form-label\">option</label>\r\n    <div class=\"col-sm-10\">\r\n      <input type=\"text\" class=\"form-control\" id=\"option\" placeholder=\"Password\">\r\n    </div>\r\n  </div>\r\n  <div class=\"form-group row\">\r\n    <div class=\"col-sm-10\">\r\n      <button type=\"submit\" class=\"btn btn-primary\">ok</button>\r\n    </div>\r\n  </div>\r\n</form>\r\n","import {Component, OnInit} from '@angular/core';\r\nimport {Question} from \"../model/question/question\";\r\nimport {QuestionServiceService} from \"../service/question-service.service\";\r\nimport {NgbModal} from '@ng-bootstrap/ng-bootstrap';\r\nimport {ModalAddQuestionComponent} from \"../modal-add-question/modal-add-question.component\";\r\n\r\n@Component({\r\n  selector: 'app-questions',\r\n  templateUrl: './questions.component.html',\r\n  styleUrls: ['./questions.component.css']\r\n})\r\nexport class QuestionsComponent implements OnInit {\r\n  questions:Question[];\r\n  constructor(private questionService: QuestionServiceService, private modalService: NgbModal) { }\r\n\r\n  ngOnInit(): void {\r\n    this.questionService.getAllQuestions().subscribe((result:Question[]) =>\r\n      {\r\n        this.questions = result;\r\n      }\r\n    );\r\n  }\r\n\r\n  openCreationNewQuestionForm(){\r\n    this.modalService.open(ModalAddQuestionComponent);\r\n  }\r\n\r\n  deleteQuestion(id){\r\n    this.questionService.deleteQuestion(id).subscribe(result => {\r\n      location.reload();\r\n    }, error => {\r\n      alert(\"Error\");\r\n    });\r\n  }\r\n\r\n  editQuestion(q:Question){\r\n    let modalForm = this.modalService.open(ModalAddQuestionComponent);\r\n    modalForm.componentInstance.editQuestion = q;\r\n  }\r\n}\r\n","<div>\r\n  <button type=\"button\" (click)=\"openCreationNewQuestionForm()\" class=\"btn btn-primary btn-lg btn-block\"\r\n          style=\"margin: 20px 0 20px 0\">add new question\r\n  </button>\r\n  <table class=\"table table-bordered\">\r\n    <thead>\r\n    <tr>\r\n      <th>\r\n        №\r\n      </th>\r\n      <th>\r\n        content\r\n      </th>\r\n      <th>\r\n        options\r\n      </th>\r\n      <th>\r\n        answer\r\n      </th>\r\n      <th>\r\n        weight\r\n      </th>\r\n      <th>\r\n        actions\r\n      </th>\r\n    </tr>\r\n    </thead>\r\n    <tbody *ngFor=\"let question of questions; let i = index\">\r\n    <tr id=\"'tr__' + {{i}}\">\r\n      <td>\r\n        {{i}}\r\n      </td>\r\n      <td>\r\n        {{question.content}}\r\n      </td>\r\n      <td>\r\n        <ul *ngFor=\"let option of question.options\">\r\n          <li>\r\n            {{option.content}}\r\n          </li>\r\n        </ul>\r\n      </td>\r\n      <td>\r\n        {{question.answer}}\r\n      </td>\r\n      <td>\r\n        {{question.weight}}\r\n      </td>\r\n      <td>\r\n        <div class=\"container\">\r\n          <div class=\"row\" style=\"text-align: center\">\r\n            <div class=\"col\">\r\n              <button class=\"btn btn-primary\" (click)=\"editQuestion(question)\">edit</button>\r\n            </div>\r\n            <div class=\"col\">\r\n              <button class=\"btn btn-danger\" (click)=\"deleteQuestion(question.id)\">delete</button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </td>\r\n    </tr>\r\n    </tbody>\r\n  </table>\r\n</div>\r\n","import { Injectable } from '@angular/core';\r\nimport {HttpClient} from \"@angular/common/http\";\r\nimport {Observable} from \"rxjs\";\r\nimport {Bot} from \"../model/bot/bot\";\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class BotService {\r\n\r\n  constructor(private httpClient: HttpClient) { }\r\n\r\n  isBotActive():Observable<any> {\r\n    return this.httpClient.get(\"/bot/get/turn\");\r\n  }\r\n\r\n  setBotTurn(bot:Bot):any {\r\n    let url:string = \"/bot/turn\";\r\n    return this.httpClient.post(url, bot);\r\n  }\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {HttpClient} from \"@angular/common/http\";\r\nimport {Question} from \"../model/question/question\";\r\nimport {Observable} from \"rxjs\";\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class QuestionServiceService {\r\n  host = \"/questions/\";\r\n  question: Question;\r\n\r\n  constructor(private httpClient: HttpClient) {\r\n  }\r\n\r\n  getAllQuestions(): Observable<any> {\r\n    let url = this.host + \"all/text\";\r\n    return this.httpClient.get(url);\r\n  }\r\n\r\n  sendQuestion(question: Question, isQuestionChanged: boolean): any {\r\n    let url:string;\r\n    if (isQuestionChanged) {\r\n      url = this.host + \"edit\";\r\n    } else {\r\n      url = this.host + \"add\";\r\n    }\r\n    return this.httpClient.post(url, question);\r\n  }\r\n\r\n  deleteQuestion(id): Observable<any> {\r\n    let url = this.host + \"remove?id=\" + id;\r\n    return this.httpClient.get(url);\r\n  }\r\n\r\n  editQuestion(id): Observable<any> {\r\n    let url = this.host + \"edit?id=\" + id;\r\n    return this.httpClient.get(url);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {Observable} from \"rxjs\";\r\nimport {HttpClient} from \"@angular/common/http\";\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UserServiceService {\r\n\r\n  constructor(private httpClient: HttpClient) { }\r\n\r\n  getAllUsers(): Observable<any> {\r\n    return this.httpClient.get(\"all/users\");\r\n  }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport {UserServiceService} from \"../service/user-service.service\";\r\nimport {User} from \"../model/user/user\";\r\n\r\n@Component({\r\n  selector: 'app-users',\r\n  templateUrl: './users.component.html',\r\n  styleUrls: ['./users.component.css']\r\n})\r\nexport class UsersComponent implements OnInit {\r\n  users:User[];\r\n  constructor(private userService: UserServiceService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.userService.getAllUsers().subscribe((result:User[]) =>\r\n      {\r\n        this.users = result;\r\n        this.checkIsUserActiveNow(this.users);\r\n      }\r\n    )\r\n  }\r\n\r\n  checkIsUserActiveNow(users):void {\r\n   users.forEach(function (value:User) {\r\n      if (value.activeNow){\r\n        value.color = \"yellow\";\r\n      }\r\n      else {\r\n        value.color=\"white\";\r\n      }\r\n   })\r\n  }\r\n\r\n}\r\n","<table class=\"table table-bordered\">\r\n  <thead>\r\n  <tr>\r\n    <th>\r\n      №\r\n    </th>\r\n    <th>\r\n      telegram id\r\n    </th>\r\n    <th>\r\n      first name\r\n    </th>\r\n    <th>\r\n      last name\r\n    </th>\r\n    <th>\r\n      score\r\n    </th>\r\n  </tr>\r\n  </thead>\r\n  <tbody *ngFor=\"let user of users; let i = index\">\r\n  <tr [ngStyle]=\"{'background-color':user.color}\">\r\n    <td>\r\n      {{i}}\r\n    </td>\r\n    <td>\r\n      {{user.telegramId}}\r\n    </td>\r\n    <td>\r\n      {{user.firstName}}\r\n    </td>\r\n    <td>\r\n      {{user.lastName}}\r\n    </td>\r\n    <td>\r\n      {{user.score}}\r\n    </td>\r\n  </tr>\r\n  </tbody>\r\n</table>\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n"]}